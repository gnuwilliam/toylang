#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 170)
  # this code will be put as-is in the Parser class
  def parse(code, show_tokens = false)
    @tokens = Lexer.new.tokenize(code) # tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # kickoff the parsing process
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    27,    75,    28,    25,    26,    15,    17,    18,    19,    20,
    21,    22,    24,    15,    83,    88,    23,    87,    27,    74,
    28,    25,    26,    15,    17,    18,    19,    20,    21,    22,
    24,    14,    49,    16,    23,    81,    27,    90,    28,    25,
    26,    16,    17,    18,    19,    20,    21,    22,    24,    14,
    50,    16,    23,    27,    31,    28,    25,    26,    31,    17,
    18,    19,    20,    21,    22,    24,    46,    14,    45,    23,
    27,    48,    28,    25,    26,    31,    17,    18,    19,    20,
    21,    22,    24,    81,    14,    80,    23,    27,    53,    28,
    25,    26,    79,    17,    18,    19,    20,    21,    22,    24,
    29,    14,    75,    23,    27,    55,    28,    25,    26,    75,
    17,    18,    19,    20,    21,    22,    24,    92,    14,   nil,
    23,    27,   nil,    28,    25,    26,   nil,    17,    18,    19,
    20,    21,    22,    24,   nil,    14,   nil,    23,    27,   nil,
    28,    25,    26,   nil,    17,    18,    19,    20,    21,    22,
    24,   nil,    14,   nil,    23,    27,   nil,    28,    25,    26,
   nil,    17,    18,    19,    20,    21,    22,    24,   nil,    14,
   nil,    23,    27,   nil,    28,    25,    26,   nil,    17,    18,
    19,    20,    21,    22,    24,   nil,    14,   nil,    23,    27,
   nil,    28,    25,    26,   nil,    17,    18,    19,    20,    21,
    22,    24,   nil,    14,   nil,    23,    27,   nil,    28,    25,
    26,   nil,    17,    18,    19,    20,    21,    22,    24,   nil,
    14,   nil,    23,    27,   nil,    28,    25,    26,   nil,    17,
    18,    19,    20,    21,    22,    24,   nil,    14,   nil,    23,
    27,   nil,    28,    25,    26,   nil,    17,    18,    19,    20,
    21,    22,    24,   nil,    14,   nil,    23,    27,   nil,    28,
    25,    26,   nil,    17,    18,    19,    20,    21,    22,    24,
   nil,    14,   nil,    23,    27,   nil,    28,    25,    26,   nil,
    17,    18,    19,    20,    21,    22,    24,   nil,    14,   nil,
    23,    27,   nil,    28,    25,    26,   nil,    17,    18,    19,
    20,    21,    22,    24,   nil,    14,   nil,    23,    27,   nil,
    28,    25,    26,   nil,    17,    18,    19,    20,    21,    22,
    24,   nil,    14,   nil,    23,    27,   nil,    28,    25,    26,
   nil,    17,    18,    19,    20,    21,    22,    24,   nil,    14,
   nil,    23,    27,   nil,    28,    25,    26,   nil,    17,    18,
    19,    20,    21,    22,    24,   nil,    14,   nil,    23,    27,
   nil,    28,    25,    26,   nil,    17,    18,    19,    20,    21,
    22,    24,   nil,    14,   nil,    23,    27,   nil,    28,    25,
    26,   nil,    17,    18,    19,    20,    21,    22,    24,    15,
    14,   nil,    23,    27,   nil,    28,    25,    26,    89,    17,
    18,    19,    20,    21,    22,    24,   nil,    14,    31,    23,
    42,    43,    40,    41,   nil,   nil,    31,    16,    42,    43,
    40,    41,   nil,    31,    14,    42,    43,    40,    41,    36,
    37,    38,    39,    34,    35,    33,    32,    75,   nil,    31,
    68,    42,    43,    40,    41,    36,    37,    38,    39,    34,
    35,    33,    32,    75,   nil,    31,   nil,    42,    43,    40,
    41,    36,    37,    38,    39,    34,    35,    33,    32,    31,
   nil,    42,    43,    40,    41,    36,    37,    38,    39,    34,
    35,    33,    32,    31,   nil,    42,    43,    40,    41,    36,
    37,    38,    39,    34,    35,    33,    32,    31,   nil,    42,
    43,    40,    41,    36,    37,    38,    39,    34,    35,    33,
    32,    31,   nil,    42,    43,    40,    41,    36,    37,    38,
    39,    34,    35,    33,    32,    31,   nil,    42,    43,    40,
    41,    36,    37,    38,    39,    34,    35,    33,    32,    31,
   nil,    42,    43,    40,    41,    36,    37,    38,    39,    34,
    35,    33,    32,    31,   nil,    42,    43,    40,    41,    36,
    37,    38,    39,    34,    35,    33,    31,   nil,    42,    43,
    40,    41,    36,    37,    38,    39,    34,    35,    31,   nil,
    42,    43,    40,    41,    36,    37,    38,    39,    31,   nil,
    42,    43,    40,    41,    36,    37,    38,    39,    31,   nil,
    42,    43,    40,    41,    31,   nil,    42,    43,    40,    41,
    31,   nil,    42,    43,    31,   nil,    42,    43 ]

racc_action_check = [
     0,    49,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     2,    74,    82,     0,    82,    75,    49,
    75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
    75,     0,    25,     0,    75,    85,    30,    85,    30,    30,
    30,     2,    30,    30,    30,    30,    30,    30,    30,    75,
    26,    75,    30,    81,    47,    81,    81,    81,    67,    81,
    81,    81,    81,    81,    81,    81,    22,    30,    22,    81,
    14,    24,    14,    14,    14,    66,    14,    14,    14,    14,
    14,    14,    14,    69,    81,    69,    14,    79,    29,    79,
    79,    79,    55,    79,    79,    79,    79,    79,    79,    79,
     1,    14,    50,    79,    23,    31,    23,    23,    23,    87,
    23,    23,    23,    23,    23,    23,    23,    88,    79,   nil,
    23,    42,   nil,    42,    42,    42,   nil,    42,    42,    42,
    42,    42,    42,    42,   nil,    23,   nil,    42,    43,   nil,
    43,    43,    43,   nil,    43,    43,    43,    43,    43,    43,
    43,   nil,    42,   nil,    43,    48,   nil,    48,    48,    48,
   nil,    48,    48,    48,    48,    48,    48,    48,   nil,    43,
   nil,    48,    27,   nil,    27,    27,    27,   nil,    27,    27,
    27,    27,    27,    27,    27,   nil,    48,   nil,    27,    28,
   nil,    28,    28,    28,   nil,    28,    28,    28,    28,    28,
    28,    28,   nil,    27,   nil,    28,    46,   nil,    46,    46,
    46,   nil,    46,    46,    46,    46,    46,    46,    46,   nil,
    28,   nil,    46,    41,   nil,    41,    41,    41,   nil,    41,
    41,    41,    41,    41,    41,    41,   nil,    46,   nil,    41,
    40,   nil,    40,    40,    40,   nil,    40,    40,    40,    40,
    40,    40,    40,   nil,    41,   nil,    40,    32,   nil,    32,
    32,    32,   nil,    32,    32,    32,    32,    32,    32,    32,
   nil,    40,   nil,    32,    33,   nil,    33,    33,    33,   nil,
    33,    33,    33,    33,    33,    33,    33,   nil,    32,   nil,
    33,    34,   nil,    34,    34,    34,   nil,    34,    34,    34,
    34,    34,    34,    34,   nil,    33,   nil,    34,    35,   nil,
    35,    35,    35,   nil,    35,    35,    35,    35,    35,    35,
    35,   nil,    34,   nil,    35,    36,   nil,    36,    36,    36,
   nil,    36,    36,    36,    36,    36,    36,    36,   nil,    35,
   nil,    36,    37,   nil,    37,    37,    37,   nil,    37,    37,
    37,    37,    37,    37,    37,   nil,    36,   nil,    37,    38,
   nil,    38,    38,    38,   nil,    38,    38,    38,    38,    38,
    38,    38,   nil,    37,   nil,    38,    39,   nil,    39,    39,
    39,   nil,    39,    39,    39,    39,    39,    39,    39,    84,
    38,   nil,    39,    45,   nil,    45,    45,    45,    84,    45,
    45,    45,    45,    45,    45,    45,   nil,    39,    61,    45,
    61,    61,    61,    61,   nil,   nil,    62,    84,    62,    62,
    62,    62,   nil,    44,    45,    44,    44,    44,    44,    44,
    44,    44,    44,    44,    44,    44,    44,    51,   nil,    51,
    44,    51,    51,    51,    51,    51,    51,    51,    51,    51,
    51,    51,    51,    52,   nil,    52,   nil,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    72,
   nil,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    71,   nil,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    70,   nil,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    86,   nil,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,     3,   nil,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,    54,
   nil,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    56,   nil,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    57,   nil,    57,    57,
    57,    57,    57,    57,    57,    57,    57,    57,    59,   nil,
    59,    59,    59,    59,    59,    59,    59,    59,    58,   nil,
    58,    58,    58,    58,    58,    58,    58,    58,    60,   nil,
    60,    60,    60,    60,    63,   nil,    63,    63,    63,    63,
    64,   nil,    64,    64,    65,   nil,    65,    65 ]

racc_action_pointer = [
    -2,   100,     6,   508,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    68,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    35,   102,    40,    19,    36,   170,   187,    88,
    34,    92,   255,   272,   289,   306,   323,   340,   357,   374,
   238,   221,   119,   136,   406,   391,   204,    37,   153,   -14,
    87,   422,   438,   nil,   522,    59,   536,   549,   571,   561,
   581,   391,   399,   587,   593,   597,    58,    41,   nil,    51,
   480,   466,   452,   nil,     1,    16,   nil,   nil,   nil,    85,
   nil,    51,   -17,   nil,   382,     3,   494,    94,   104,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -1,   -56,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -56,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -56,   -44,   -56,   -56,   -56,   -56,   -56,
    -5,   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,
   -56,   -56,   -56,   -56,   -56,   -28,   -56,   -34,   -56,   -56,
   -56,   -56,   -56,    93,    -4,   -26,   -31,   -32,   -33,   -35,
   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -16,   -56,
   -29,   -45,   -46,   -47,   -49,   -56,   -52,   -53,   -54,   -28,
   -25,   -56,   -56,   -50,   -56,   -56,   -30,   -56,   -56,   -55,
   -27,   -48,   -51 ]

racc_goto_table = [
    30,     2,    44,    73,    76,    77,    78,     1,    69,    82,
   nil,    47,   nil,   nil,   nil,    51,    52,   nil,    54,   nil,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,   nil,    70,    71,   nil,    72,   nil,   nil,   nil,
   nil,    91,    85,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,   nil,    86,
   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,   nil,   nil,
   nil,   nil,    30 ]

racc_goto_check = [
     4,     2,     3,    15,    15,    15,    15,     1,    14,    16,
   nil,     3,   nil,   nil,   nil,     3,     3,   nil,     3,   nil,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,   nil,     3,     3,   nil,     3,   nil,   nil,   nil,
   nil,    15,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     7,     1,   -12,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -37,   -46,   -65 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 37, :_reduce_1,
  1, 37, :_reduce_2,
  1, 38, :_reduce_3,
  3, 38, :_reduce_4,
  2, 38, :_reduce_5,
  1, 38, :_reduce_6,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  3, 39, :_reduce_16,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 41, :_reduce_19,
  1, 41, :_reduce_20,
  1, 41, :_reduce_21,
  1, 41, :_reduce_22,
  1, 41, :_reduce_23,
  1, 42, :_reduce_24,
  4, 42, :_reduce_25,
  3, 42, :_reduce_26,
  6, 42, :_reduce_27,
  0, 50, :_reduce_28,
  1, 50, :_reduce_29,
  3, 50, :_reduce_30,
  3, 43, :_reduce_31,
  3, 43, :_reduce_32,
  3, 43, :_reduce_33,
  2, 43, :_reduce_34,
  3, 43, :_reduce_35,
  3, 43, :_reduce_36,
  3, 43, :_reduce_37,
  3, 43, :_reduce_38,
  3, 43, :_reduce_39,
  3, 43, :_reduce_40,
  3, 43, :_reduce_41,
  3, 43, :_reduce_42,
  3, 43, :_reduce_43,
  1, 44, :_reduce_44,
  3, 45, :_reduce_45,
  3, 45, :_reduce_46,
  3, 46, :_reduce_47,
  6, 46, :_reduce_48,
  0, 52, :_reduce_49,
  1, 52, :_reduce_50,
  3, 52, :_reduce_51,
  3, 47, :_reduce_52,
  3, 48, :_reduce_53,
  3, 49, :_reduce_54,
  3, 51, :_reduce_55 ]

racc_reduce_n = 56

racc_shift_n = 93

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :WHILE => 4,
  :DEF => 5,
  :CLASS => 6,
  :NEWLINE => 7,
  :NUMBER => 8,
  :STRING => 9,
  :TRUE => 10,
  :FALSE => 11,
  :NIL => 12,
  :IDENTIFIER => 13,
  :CONSTANT => 14,
  :INDENT => 15,
  :DEDENT => 16,
  "." => 17,
  "!" => 18,
  "*" => 19,
  "/" => 20,
  "+" => 21,
  "-" => 22,
  ">" => 23,
  ">=" => 24,
  "<" => 25,
  "<=" => 26,
  "==" => 27,
  "!=" => 28,
  "&&" => 29,
  "||" => 30,
  "=" => 31,
  "," => 32,
  "(" => 33,
  ")" => 34,
  ";" => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "WHILE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "While",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_19(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_20(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_21(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_22(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_23(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_24(val, _values, result)
     result = CallNode.new(nil, val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_25(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_26(val, _values, result)
     result = CallNode.new(val[0], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_27(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_28(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_29(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_30(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_31(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_32(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[1], val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_41(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_43(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_44(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_45(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_46(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_47(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_48(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_49(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_50(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_51(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_52(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_53(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_54(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_55(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
